// Code generated by sqlc. DO NOT EDIT.
// source: entry.sql

package db

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :execresult
INSERT INTO entries (
  account_id,amount
) VALUES (
  ?, ?
)
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (sql.Result, error) {
	return q.exec(ctx, q.createEntryStmt, createEntry, arg.AccountID, arg.Amount)
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries
WHERE id = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteEntryStmt, deleteEntry, id)
	return err
}

const getEntryByID = `-- name: GetEntryByID :one
SELECT id,account_id,amount,created_at FROM entries
WHERE id = ?
`

func (q *Queries) GetEntryByID(ctx context.Context, id int64) (Entry, error) {
	row := q.queryRow(ctx, q.getEntryByIDStmt, getEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getLastEntry = `-- name: GetLastEntry :one
SELECT id,account_id,amount,created_at FROM entries
ORDER BY id DESC 
LIMIT 1
`

func (q *Queries) GetLastEntry(ctx context.Context) (Entry, error) {
	row := q.queryRow(ctx, q.getLastEntryStmt, getLastEntry)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id,account_id,amount,created_at FROM entries
ORDER BY created_at DESC
`

func (q *Queries) ListEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.query(ctx, q.listEntriesStmt, listEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
