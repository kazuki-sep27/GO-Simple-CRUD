// Code generated by sqlc. DO NOT EDIT.
// source: transfer.sql

package db

import (
	"context"
	"database/sql"
)

const createTransfer = `-- name: CreateTransfer :execresult
INSERT INTO transfers (
  from_account_id,to_account_id,amount
) VALUES (
  ?, ?, ?
)
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (sql.Result, error) {
	return q.exec(ctx, q.createTransferStmt, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers
WHERE id = ?
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTransferStmt, deleteTransfer, id)
	return err
}

const getLastTransfer = `-- name: GetLastTransfer :one
SELECT id,from_account_id,to_account_id,amount,created_at FROM transfers
ORDER BY id DESC 
LIMIT 1
`

func (q *Queries) GetLastTransfer(ctx context.Context) (Transfer, error) {
	row := q.queryRow(ctx, q.getLastTransferStmt, getLastTransfer)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferByID = `-- name: GetTransferByID :one
SELECT id,from_account_id,to_account_id,amount,created_at FROM transfers
WHERE id = ?
`

func (q *Queries) GetTransferByID(ctx context.Context, id int64) (Transfer, error) {
	row := q.queryRow(ctx, q.getTransferByIDStmt, getTransferByID, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id,from_account_id,to_account_id,amount,created_at FROM transfers
ORDER BY id
`

func (q *Queries) ListTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.query(ctx, q.listTransfersStmt, listTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
